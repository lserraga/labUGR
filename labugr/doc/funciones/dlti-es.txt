Clase de base del sistema invariante de tiempo lineal discreto.

    Parámetros
    ----------
    * system: argumentos
        La clase `dlti` puede ser instanciada con argumentos de 2, 3 o 4.
        A continuación se indica el número de argumentos y la
        subclase de tiempo discreto que se crea:

            * 2: `TransferFunction`: (numerador, denominador)
            * 3: `ZerosPolesGain`: (ceros, polos, ganancia)
            * 4: `StateSpace`: (A, B, C, D)

        Cada argumento puede ser una matriz o una secuencia.
    dt: float, opcional
        Tiempo de muestreo [s] de los sistemas de tiempo discreto. Por defecto es `` True``
        (tiempo de muestreo no especificado). Debe especificarse como un argumento de palabra clave,
        por ejemplo, "dt = 0.1".

    Ver también
    --------
    ZerosPolesGain, StateSpace, TransferFunction, lti

    Notas
    -----
    Las instancias `dlti` no existen directamente. En su lugar, `dlti` crea una instancia
    de una de sus subclases: `StateSpace`,` TransferFunction` o
    `ZerosPolesGain`.

    Cambiar el valor de las propiedades que no son parte directa de la
    representación del sistema (como los 'ceros' de un sistema `StateSpace`) es
    muy ineficiente y puede dar lugar a inexactitudes numéricas. Es mejor
    convertir primero a la representación del sistema específico. Por ejemplo, llame al
    `` sys = sys.to_zpk () `` antes de acceder / cambiar los ceros, polos o ganancia.

    Si (numerador, denominador) se pasa para `` * sistema '', los coeficientes para
    tanto el numerador como el denominador deben ser especificados en descendencia
    exponente (por ejemplo, `` z ^ 2 + 3z + 5`` se representaría como `` [1, 3,
    5] ``).

    .. versionadded :: 0.18.0

    Ejemplos
    --------
    >>> de la señal de importación de scipy

    >>> signal.dlti (1, 2, 3, 4)
    StateSpaceDiscrete (
    array ([[1]]),
    array ([[2]]),
    array ([[3]]),
    array ([[4]]),
    dt: Verdadero
    )

    >>> signal.dlti (1, 2, 3, 4, dt = 0,1)
    StateSpaceDiscrete (
    array ([[1]]),
    array ([[2]]),
    array ([[3]]),
    array ([[4]]),
    dt: 0,1
    )

    >>> signal.dlti ([1, 2], [3, 4], 5, dt = 0,1)
    ZerosPolesGainDiscrete (
    matriz ([1, 2]),
    matriz ([3, 4]),
    5,
    dt: 0,1
    )

    >>> signal.dlti ([3, 4], [1, 2], dt = 0,1)
    TransferFunctionDiscrete (
    matriz ([3., 4.]),
    matriz ([1., 2.]),
    dt: 0,1
    )
Generador de coseno con barrido de frecuencia, con una frecuencia dependiente del tiempo.
    Esta función genera una función sinusoidal cuya función instantánea
    frecuencia varía con el tiempo. La frecuencia en el tiempo t es dada por
    el polinomio `poly`.
    Parámetros
    ----------
    t: ndarray
        Tiempos de evaluación de la forma de onda.
    poly: 1-D array_like o instancia de numpy.poly1d
        La frecuencia deseada expresada como un polinomio. Si `poly` es
        una lista o ndarray de longitud n, entonces los elementos de `poly` son
        los coeficientes del polinomio, y los coeficientes instantáneos
        frecuencia es
          poli [0] * t ** (n-1) + poli [1] * t ** (n-2) + ... + poli [n-1]
        Si `poly` es una instancia de numpy.poly1d, entonces el
        la frecuencia instantánea es
          `` f (t) = poli (t) ``
    phi: float, opcional
        Compensación de fase, en grados, Por defecto: 0.
    Devoluciones
    -------
    sweep_poly: ndarray
        Una matriz numpy que contiene la señal evaluada en `t 'con la
        frecuencia solicitada en función del tiempo. Más precisamente, la función
        devuelve `` cos (fase + (pi / 180) * phi) ``, donde `phase` es la integral
        (de 0 a t) de "2 * pi * f (t)"; `` f (t) `` se define arriba.
    Ver también
    --------
    chirrido
    Notas
    -----
    .. versionadded :: 0.8.0
    Si `poly` es una lista o ndarray de longitud` n`, entonces los elementos de
    `poly` son los coeficientes del polinomio, y los coeficientes instantáneos
    frecuencia es:
        poli [0] * t ** (n-1) + poli [1] * t ** (n-2) + ... + poli [n-1]
    Si `poly` es una instancia de` numpy.poly1d`, entonces el instante
    frecuencia es:
          `` f (t) = poli (t) ``
    Finalmente, la salida `s` es:
        `` cos (fase + (pi / 180) * phi) ``
    donde `fase` es la integral de 0 a` t 'de `` 2 * pi * f (t) ``,
    `` f (t) `` según lo definido arriba.
    Ejemplos
    --------
    Calcular la forma de onda con frecuencia instantánea ::
        f (t) = 0,025 * t ** 3 - 0,36 * t ** 2 + 1,25 * t + 2
    sobre el intervalo 0 <= t <= 10.
    >>> de scipy.signal import sweep_poly
    >>> p = np.poly1d ([0,025, -0,36, 1,25, 2,0])
    >>> t = np.linspace (0, 10, 5001)
    >>> w = sweep_poly (t, p)
    Trazarlo:
    >>> import matplotlib.pyplot como plt
    >>> plt.subplot (2, 1, 1)
    >>> plt.plot (t, w)
    >>> plt.title ("Barrido Poly \ ncon frecuencia" +
    ... "$ f (t) = 0,025t ^ 3 - 0,36t ^ 2 + 1,25t + 2 $")
    >>> plt.subplot (2, 1, 2)
    >>> plt.plot (t, p (t), 'r', etiqueta = 'f (t)')
    >>> plt.legend ()
    >>> plt.xlabel ('t')
    >>> plt.tight_layout ()
    >>> plt.show ()
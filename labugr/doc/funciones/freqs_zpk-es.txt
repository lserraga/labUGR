Calcular la respuesta de frecuencia del filtro analógico.

    Dado los ceros `z`, los polos` p` y la ganancia `k` de un filtro, calcule su
    respuesta frecuente::

                (jw-z [0]) * (jw-z [1]) * ... * (jw-z [-1])
     H (w) = k * ----------------------------------------
                (jw-p [0]) * (jw-p [1]) * ... * (jw-p [-1])

    Parámetros
    ----------
    z: array_like
        Cero de un filtro lineal
    p: array_like
        Postes de un filtro lineal
    k: escalar
        Ganancia de un filtro lineal
    worN: {Ninguno, int, array_like}, opcional
        Si no, a continuación, calcular a 200 frecuencias alrededor de las partes interesantes
        de la curva de respuesta (determinada por posiciones polo-cero). Si un solo
        entero, a continuación, calcular en que muchas frecuencias. De lo contrario, calcule el
        respuesta a las frecuencias angulares (por ejemplo rad / s) dadas en `worN '.

    Devoluciones
    -------
    w: ndarray
        Las frecuencias angulares a las que se calculó «h».
    h: ndarray
        La respuesta de frecuencia.

    Ver también
    --------
    freqs: Calcular la respuesta en frecuencia de un filtro analógico en forma de TF
    freqz: Calcular la respuesta de frecuencia de un filtro digital en formato TF
    freqz_zpk: Calcular la respuesta de frecuencia de un filtro digital en forma de ZPK

    Notas
    -----
    .. versionadded: 0.19.0

    Ejemplos
    --------
    >>> de scipy.signal importación freqs_zpk, iirfilter

    >>> z, p, k = iirfilter (4, [1, 10], 1, 60, analógico = True, ftype = 'cheby1'
    ... salida = 'zpk')

    >>> w, h = freqs_zpk (z, p, k, worN = np.logspace (-1, 2, 1000))

    >>> import matplotlib.pyplot como plt
    >>> plt.semilogx (w, 20 * np.log10 (abs (h)))
    >>> plt.xlabel ('Frecuencia')
    >>> plt.ylabel ('Respuesta de amplitud [dB]')
    >>> plt.grid ()
    >>> plt.show ()
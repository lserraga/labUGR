Los números de retorno espaciados uniformemente en una escala de registro (una progresión geométrica).

    Esto es similar a `logspace`, pero con endpoints especificados directamente.
    Cada muestra de salida es un múltiplo constante del anterior.

    Parámetros
    ----------
    inicio: escalar
        El valor inicial de la secuencia.
    parada: escalar
        El valor final de la secuencia, a menos que `endpoint` sea False.
        En ese caso, los valores de `` num + 1`` están espaciados sobre el
        intervalo en log-espacio, de los cuales todos excepto el último (una secuencia de
        longitud `núm ').
    num: entero, opcional
        Número de muestras a generar. El valor predeterminado es 50.
    punto final: booleano, opcional
        Si es verdadero, `stop` es la última muestra. De lo contrario, no está incluido.
        El valor predeterminado es True.
    dtype: dtype
        El tipo de matriz de salida. Si `dtype` no se da, deduzca los datos
        tipo de los otros argumentos de entrada.

    Devoluciones
    -------
    muestras: ndarray
        muestras "num", igualmente espaciadas en una escala logarítmica.

    Ver también
    --------
    logspace: Similar a geomspace, pero con puntos finales especificados usando log
               y la base.
    linspace: Similar a geomspace, pero con aritmética en lugar de geométrica
               progresión.
    arange: Similar a linspace, con el tamaño de paso especificado en lugar de
             número de muestras.

    Notas
    -----
    Si las entradas o dtype son complejas, la salida seguirá un logarítmico
    espiral en el plano complejo. (Hay un número infinito de espirales
    pasando por dos puntos; la salida seguirá el camino más corto.)

    Ejemplos
    --------
    >>> np.geomspace (1, 1000, num = 4)
    matriz ([1., 10., 100., 1000.])
    >>> np.geomspace (1, 1000, num = 3, endpoint = False)
    matriz ([1., 10., 100.])
    >>> np.geomspace (1, 1000, num = 4, endpoint = False)
    matriz ([1., 5.62341325, 31.6227766, 177.827941])
    >>> np.geomspace (1, 256, num = 9)
    matriz ([1., 2., 4., 8., 16., 32., 64., 128., 256.])

    Tenga en cuenta que lo anterior no puede producir enteros exactos:

    >>> np.geomspace (1, 256, num = 9, dtype = int)
    matriz ([1, 2, 4, 7, 16, 32, 63, 127, 256])
    >>> np.around (np.geomspace (1, 256, num = 9)) astype (int)
    matriz ([1, 2, 4, 8, 16, 32, 64, 128, 256])

    Se permiten entradas negativas, decrecientes y complejas:

    >>> np.geomspace (1000, 1, num = 4)
    matriz ([1000., 100., 10., 1.])
    >>> np.geomspace (-1000, -1, num = 4)
    array ([- 1000., -100., -10., -1.])
    >>> np.geomspace (1j, 1000j, num = 4) # Línea recta
    array ([0. + 1.j, 0. + 10.j, 0. + 100.j, 0. + 1000.j])
    >>> np.geomspace (-1 + 0j, 1 + 0j, num = 5) # Círculo
    matriz ([- 1.00000000 + 0.j, -0.70710678 + 0.70710678j,
            0,00000000 + 1.j, 0.70710678 + 0.70710678j,
            1.00000000 + 0.j])

    Ilustración gráfica del parámetro `` endpoint``:

    >>> import matplotlib.pyplot como plt
    >>> N = 10
    >>> y = np.zeros (N)
    >>> plt.semilogx (np.geomspace (1, 1000, N, endpoint = True), y + 1, 'o')
    >>> plt.semilogx (np.geomspace (1, 1000, N, punto final = Falso), y + 2, 'o')
    >>> plt.axis ([0.5, 2000, 0, 3])
    >>> plt.grid (True, color = '0.7', linestyle = '-', which = 'both', axis = 'both')
    >>> plt.show ()
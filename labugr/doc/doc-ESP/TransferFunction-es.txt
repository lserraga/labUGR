Linear Time Invariant clase de sistema en forma de función de transferencia.

    Representa el sistema como la función de transferencia de tiempo continuo
    : math: `H (s) = \ sum_ {i = 0} ^ N b [N-i] s ^ i / \ sum_ {j = 0} ^ M a [M-j]
    función de transferencia de tiempo discreto
    : math: `H (s) = \ sum_ {i = 0} ^ N b [N-i] z ^ i / \ sum_ {j = 0} ^ M a [M-j] z ^
    : math: `b` son elementos del numerador` num`,: math: `a` son elementos de
    el denominador `den` y` `N == len (b) - 1``,` `M == len (a) - 1``.
    Los sistemas `TransferFunction` heredan
    funcionalidad de las clases `lti`, respectivamente` dlti`, dependiendo de
    qué representación del sistema se utiliza.

    Parámetros
    ----------
    * system: argumentos
        La clase `TransferFunction` puede instanciarse con 1 o 2
        argumentos. A continuación se indica el número de argumentos de entrada y su
        interpretación:

            * 1: `lti` o` dlti` sistema: (`StateSpace`,` TransferFunction` o
              `ZerosPolesGain`)
            * 2: array_like: (numerador, denominador)
    dt: float, opcional
        Tiempo de muestreo [s] de los sistemas de tiempo discreto. El valor predeterminado es `None`
        (tiempo continuo). Debe especificarse como un argumento de palabra clave, para
        ejemplo, `` dt = 0.1``.

    Ver también
    --------
    ZerosPolesGain, StateSpace, lti, dlti
    tf2ss, tf2zpk, tf2sos

    Notas
    -----
    Cambiar el valor de las propiedades que no forman parte del
    La representación del sistema `TransferFunction` (como el` A `,` B`, `C`,` D`
    matrices espacio-estado) es muy ineficiente y puede dar lugar a
    inexactitudes Es mejor convertir al sistema específico
    primera representación. Por ejemplo, llame a `` sys = sys.to_ss () `` antes
    acceder / cambiar las matrices del sistema A, B, C, D.

    Si (numerador, denominador) se pasa para `` * sistema '', los coeficientes
    tanto el numerador como el denominador deben ser especificados en descendencia
    orden de exponente (por ejemplo, `` s ^ 2 + 3s + 5`` o `` z ^ 2 + 3z + 5``
    representado por "[1, 3, 5]")

    Ejemplos
    --------
    Construir la función de transferencia:

    .. matemáticas :: H (s) = \ frac {s ^ 2 + 3s + 3} {s ^ 2 + 2s + 1}

    >>> de la señal de importación de scipy

    >>> num = [1, 3, 3]
    >>> den = [1, 2, 1]

    >>> signal.TransferFunction (num, den)
    TransferFunctionContinuous (
    array ([1., 3., 3.]),
    matriz ([1., 2., 1.]),
    dt: Ninguno
    )

    Contruct la función de transferencia con un tiempo de muestreo de 0,1 segundos:

    .. matemáticas :: H (z) = \ frac {z ^ 2 + 3z + 3} {z ^ 2 + 2z + 1}

    >>> signal.TransferFunction (num, den, dt = 0.1)
    TransferFunctionDiscrete (
    array ([1., 3., 3.]),
    matriz ([1., 2., 1.]),
    dt: 0,1
    )
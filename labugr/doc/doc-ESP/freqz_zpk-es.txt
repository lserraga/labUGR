Calcule la respuesta de frecuencia de un filtro digital en forma de ZPK.

    Dados los ceros, polos y ganancia de un filtro digital, calcule su frecuencia
    respuesta::

    : math: `H (z) = k \ prod_i (z - Z [i]) / \ prod_j (z - P [j])`

    donde: math: `k` es el` gain`,: math: `Z` son los` zeros` y: math: `P` are
    los "polos".

    Parámetros
    ----------
    z: array_like
        Cero de un filtro lineal
    p: array_like
        Postes de un filtro lineal
    k: escalar
        Ganancia de un filtro lineal
    worN: {Ninguno, int, array_like}, opcional
        Si No (por defecto), luego calcule a 512 frecuencias equidistantes
        alrededor del círculo de la unidad.
        Si un solo entero, a continuación, calcular en que muchas frecuencias.
        Si un array_like, calcular la respuesta a las frecuencias dadas (en
        radianes / muestra).
    todo: bool, opcional
        Normalmente, las frecuencias se calculan de 0 a la frecuencia de Nyquist,
        pi radians / muestra (mitad superior de la unidad de círculo). Si `whole` es verdadero,
        calcular frecuencias de 0 a 2 * pi radianes / muestra.

    Devoluciones
    -------
    w: ndarray
        Las frecuencias normalizadas a las que se calculó «h», en
        radianes / muestra.
    h: ndarray
        La respuesta de frecuencia.

    Ver también
    --------
    freqs: Calcular la respuesta en frecuencia de un filtro analógico en forma de TF
    freqs_zpk: Calcular la respuesta de frecuencia de un filtro analógico en forma ZPK
    freqz: Calcular la respuesta de frecuencia de un filtro digital en formato TF

    Notas
    -----
    .. versionadded: 0.19.0

    Ejemplos
    --------
    >>> de la señal de importación de scipy
    >>> z, p, k = señal.butter (4, 0.2, salida = 'zpk')
    >>> w, h = señal.freqz_zpk (z, p, k)

    >>> import matplotlib.pyplot como plt
    >>> fig = plt.figure ()
    >>> plt.title ('Respuesta de frecuencia del filtro digital')
    >>> ax1 = fig.add_subplot (111)

    >>> plt.plot (w, 20 * np.log10 (abs (h)), 'b')
    >>> plt.ylabel ('Amplitud [dB]', color = 'b')
    >>> plt.xlabel ('Frecuencia [rad / muestra]')

    >>> ax2 = ax1.twinx ()
    >>> ángulos = np.unwrap (np.angle (h))
    >>> plt.plot (w, ángulos, 'g')
    >>> plt.ylabel ('Ángulo (radianes)', color = 'g')
    >>> plt.grid ()
    >>> plt.axis ('apretado')
    >>> plt.show ()